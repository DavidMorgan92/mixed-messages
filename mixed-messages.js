// TODO: Expand the list of libs
/**
 * Set of libs which can be injected with words from libInjects
 */
const libs = [
	"It was a {adj}, cold November day. I woke up to the {adj} smell of {bird} roasting in the {roominahouse} downstairs. I {verbpasttense} down the stairs to see if I could help {verb} the dinner. My mom said, \"See if {name} needs a fresh {noun}.\" So I carried a tray of glasses full of {liquid} into the {verbing} room. When I got there, I couldn't believe my {bodypartplural}! There were {nounplural} {verbing} on the {noun}!",
	"The majestic {animal} has roamed the forests of {country} for thousands of years. Today, she wanders in search of {nounplural}. She must find food to survive. While hunting for {food}, she found a {screendevice} hidden behind a {noun}. She has never seen anything like this before. What will she do? With the device in her teeth, she tries to {verb}, but nothing happens. She takes it back to her family. When her family sees it, they quickly {verb}. Soon, the device becomes {adj}, and the family decides to put it back where they found it.",
	"O say can you {verb} by the dawn's early {noun},\nWhat so {adverb} we {verbpasttense} at the twilight's last gleaming,\nWhose broad {nounplural} and bright {nounplural} through the {adj} fight,\nO'er the {nounplural} we watched, were so gallantly {verbing}?\nAnd the rockets' {color} glare, the {nounplural} bursting in {noun},\nGave proof through the night that our {noun} was still there; {interjection} does that {adj} banner yet {verb},\nO'er the land of the {adj} and the home of the {adj}?",
	"Today, every student has a computer small enough to fit into his {noun}. He can solve any math problem by simply pushing the computer's little {nounplural}. Computers can add, multiply, divide, and {verb}. They can also {verb} better than a human. Some computers are {bodypartplural}. Others have a/an {adj} screen that shows all kinds of {nounplural} and {adj} figures.",
	"Our school cafeteria has really {adj} food. Just thinking about it makes my stomach {verb}. The spaghetti is {adj} and tastes like {noun}. One day, I swear one of my meatballs started to {verb}! The turkey tacos are totally {adj} and look kind of like old {nounplural}. My friend {name} actually likes the meatloaf, even though it's {adj} and {adj}. I call it \"mystery meatloaf\" and think it's really made out of {nounplural}. My dad said he'd make my lunches, but the first day, he made me a sandwich out of {noun} and peanut butter! I think I'd rather take my chances with the cafeteria!"
];

// TODO: Expand the list of words
/**
 * Sets of words to inject into a lib
 */
 const libInjects = {
	// General adjectives
	adj: [
		"adorable",
		"adventurous",
		"aggressive",
		"annoying",
		"beautiful",
		"caring",
		"confident",
		"clumsy",
		"considerate",
		"excitable",
		"glamorous",
		"grumpy",
		"happy",
		"helpful",
		"important",
		"intimidating",
		"obnoxious",
		"odd",
		"talented",
		"thoughtless",
		"timid",
		"handsome",
		"bright",
		"clear",
		"distinct",
		"drab",
		"elegant",
		"filthy",
		"gleaming",
		"grotesque",
		"long",
		"magnificent",
		"precious",
		"sparkling",
		"spotless",
		"strange",
		"unsightly",
		"unusual",
		"valuable",
		"brave",
		"calm",
		"cheerful",
		"comfortable",
		"courageous",
		"determined",
		"eager",
		"elated",
		"encouraged",
		"energetic",
		"excited",
		"exuberant",
		"fantastic",
		"fine",
		"healthy",
		"joyful",
		"pleasant",
		"relieved",
		"angry",
		"annoyed",
		"anxious",
		"ashamed",
		"awful",
		"bewildered",
		"bored",
		"confused",
		"defeated",
		"defiant",
		"depressed",
		"disgusted",
		"disturbed",
		"dizzy",
		"embarrassed",
		"envious",
		"frightened",
		"hungry",
		"lonely",
		"scared",
		"terrified",
		"worried",
		"big",
		"colossal",
		"enormous",
		"gigantic",
		"great",
		"huge",
		"immense",
		"large",
		"little",
		"long",
		"mammoth",
		"massive",
		"meagre",
		"mighty",
		"miniature",
		"miniscule",
		"petite",
		"puny",
		"short",
		"tall",
		"teeny",
		"tiny",
		"ancient",
		"brief",
		"early",
		"fast",
		"late",
		"mordern",
		"old",
		"quick",
		"rapid",
		"short",
		"slow",
		"swift",
		"young"
	],
	// General nouns
	noun: [
		"apple",
		"arithmetic",
		"badge",
		"basket",
		"basketball",
		"battle",
		"beast",
		"beetle",
		"beggar",
		"brain",
		"bubble",
		"bucket",
		"cactus",
		"cannon",
		"cow",
		"celery",
		"cellar",
		"cloth",
		"coach",
		"coast",
		"crate",
		"cream",
		"daughter",
		"donkey",
		"earthquake",
		"feast",
		"finger",
		"flock",
		"frame",
		"furniture",
		"geese",
		"ghost",
		"giraffe",
		"governor",
		"honey",
		"hope",
		"income",
		"island",
		"jeans",
		"judge",
		"lamp",
		"lettuce",
		"marble",
		"month",
		"ocean",
		"patch",
		"plane",
		"playground",
		"poison",
		"riddle",
		"scale",
		"seashore",
		"sidewalk",
		"sleet",
		"smoke",
		"bathtub",
		"nose",
		"sidewalk",
		"son",
		"stage",
		"station",
		"throat",
		"throne",
		"title",
		"toothbrush",
		"turkey",
		"umbrella",
		"underwear",
		"vacation",
		"vegetable",
		"poison",
		"riddle",
		"visitor",
		"voyage",
		"year"
	],
	// General plural nouns
	nounplural: [
		"cards"
	],
	// General adverbs
	adverb: [
		"quickly"
	],
	// General verbs
	verb: [
		"go",
		"ride",
		"run",
		"shovel",
		"leap",
		"shout"
	],
	// General past tense verbs
	verbpasttense: [
		"went",
		"rode",
		"ran",
		"shovelled",
		"leapt",
		"shouted"
	],
	// General verbs ending in -ing
	verbing: [
		"dancing",
		"fighting",
		"running",
		"speaking",
		"lunging",
		"rolling",
		"riding",
		"writing",
		"reading"
	],
	// Types of animal
	animal: [
		"lion",
		"cheetah",
		"dog",
		"wolf",
		"cat",
		"shark"
	],
	// Types of bird
	bird: [
		"pidgeon",
		"chicken",
		"kestrel",
		"eagle",
		"falcon",
		"starling",
		"crow",
		"sparrow",
		"owl"
	],
	// A room in a house
	roominahouse: [
		"bathroom",
		"bedroom",
		"kitchen",
		"living room",
		"dining room",
		"hallway"
	],
	// Proper names
	name: [
		"Doug",
		"Dave",
		"Alice",
		"Greg",
		"Tom",
		"Ken",
		"Bill",
		"Bob",
		"Logan",
		"Paul",
		"Sarah",
		"Sam",
		"Tim",
		"Gary",
		"Barry",
		"Tony",
		"Neil",
		"Michelle",
		"Saul",
		"Tina",
		"Catherine",
		"Mary",
		"Joe"
	],
	// Devices with screens
	screendevice: [
		"tablet",
		"phone",
		"laptop"
	],
	// Liquids
	liquid: [
		"water",
		"tea",
		"coffee",
		"oil",
		"spit",
		"sauce",
		"milk",
		"blood",
		"petrol",
		"wine",
		"honey",
		"juice",
		"syrup",
		"slushie",
		"beer",
		"milkshake",
		"lemonade",
		"vinegar",
		"soda",
		"broth",
		"espresso",
		"sweat"
	],
	// Plural body parts
	bodypartplural: [
		"arms",
		"legs",
		"hands",
		"feet",
		"eyes",
		"fingers",
		"toes",
		"thumbs",
		"lips",
		"nails",
		"ears",
		"cheeks",
		"eyebrows",
		"eyelashes",
		"teeth",
		"knees",
		"thighs",
		"calves",
		"earlobes",
		"nostrils",
		"gums",
		"shoulders"
	],
	// Countries
	country: [
		"Afghanistan",
		"Albania",
		"Algeria",
		"Andorra",
		"Angola",
		"Argentina",
		"Armenia",
		"Australia",
		"Austria",
		"Azerbaijan",
		"Bahrain",
		"Bangladesh",
		"Barbados",
		"Belarus",
		"Belgium",
		"Belize",
		"Bhutan",
		"Bolivia",
		"Botswana",
		"Brazil",
		"Brunei",
		"Bulgaria",
		"Burundi",
		"Cabo Verde",
		"Cambodia",
		"Cameroon",
		"Canada",
		"Chad",
		"Chile",
		"China",
		"Colombia",
		"Costa Rica",
		"Croatia",
		"Cuba",
		"Cyprus",
		"Denmark",
		"Djibouti",
		"Ecuador",
		"Egypt",
		"El Salvador",
		"Eritrea",
		"Estonia",
		"Ethiopia",
		"Fiji",
		"Finland",
		"France",
		"Gabon",
		"Gambia",
		"Georgia",
		"Germany",
		"Ghana",
		"Greece",
		"Grenada",
		"Guatemala",
		"Guinea",
		"Guyana",
		"Haiti",
		"Honduras",
		"Hungary",
		"Iceland",
		"India",
		"Indonesia",
		"Iran",
		"Iraq",
		"Ireland",
		"Israel",
		"Italy",
		"Jamaica",
		"Japan",
		"Jordan",
		"Kazakhstan",
		"Kenya",
		"Kiribati",
		"Kuwait",
		"Kyrgyzstan",
		"Laos",
		"Latvia",
		"Lebanon",
		"Lesotho",
		"Liberia",
		"Libya",
		"Liechtenstein",
		"Lithuania",
		"Luxembourg",
		"Madagascar",
		"Malawi",
		"Malaysia",
		"Maldives",
		"Mali",
		"Malta",
		"Marshall Islands",
		"Mauritania",
		"Mauritius",
		"Mexico",
		"Micronesia",
		"Moldova",
		"Monaco",
		"Mongolia",
		"Montenegro",
		"Morocco",
		"Mozambique",
		"Myanmar",
		"Namibia",
		"Nauru",
		"Nepal",
		"Netherlands",
		"New Zealand",
		"Nicaragua",
		"Niger",
		"Nigeria",
		"North Korea",
		"North Macedonia",
		"Norway",
		"Oman",
		"Pakistan",
		"Palau",
		"Panama",
		"Papua New Guinea",
		"Paraguay",
		"Peru",
		"Philippines",
		"Poland",
		"Portugal",
		"Qatar",
		"Romania",
		"Russia",
		"Rwanda",
		"Saint Lucia",
		"Samoa",
		"San Marino",
		"Saudi Arabia",
		"Senegal",
		"Serbia",
		"Seychelles",
		"Sierra Leone",
		"Singapore",
		"Slovakia",
		"Slovenia",
		"Somalia",
		"South Africa",
		"South Korea",
		"South Sudan",
		"Spain",
		"Sri Lanka",
		"Sudan",
		"Suriname",
		"Sweden",
		"Switzerland",
		"Syria",
		"Tajikistan",
		"Tanzania",
		"Thailand",
		"Togo",
		"Tonga",
		"Tunisia",
		"Turkey",
		"Turkmenistan",
		"Tuvalu",
		"Uganda",
		"Ukraine",
		"United Kingdom",
		"Uruguay",
		"Uzbekistan",
		"Vanuatu",
		"Venezuela",
		"Vietnam",
		"Yemen",
		"Zambia",
		"Zimbabwe"
	],
	// Types of food
	food: [
		"asparagus",
		"apples",
		"avocado",
		"alfalfa",
		"almond",
		"arugala",
		"artichoke",
		"applesauce",
		"antelope",
		"apple juice",
		"bruscetta",
		"bacon",
		"bagels",
		"baked beans",
		"bison",
		"bisque",
		"bread",
		"broccoli",
		"buritto",
		"babaganoosh",
		"cabbage",
		"cake",
		"carrots",
		"celery",
		"cheese",
		"chicken",
		"catfish",
		"chips",
		"chocolate",
		"chowder",
		"clams",
		"coffee",
		"cookies",
		"corn",
		"cupcakes",
		"crab",
		"curry",
		"cereal",
		"chimichanga",
		"dates",
		"dips",
		"duck",
		"dumplings",
		"donuts",
		"eggs",
		"enchilada",
		"eggrolls",
		"edimame",
		"fajita",
		"falafel",
		"fish",
		"franks",
		"fondu",
		"garlic",
		"ginger",
		"gnocchi",
		"goose",
		"granola",
		"grapes",
		"green beans",
		"gumbo",
		"grits",
		"ham",
		"halibut",
		"hamburger",
		"honey",
		"hash browns",
		"hot dogs",
		"hummus",
		"ice cream",
		"jambalaya",
		"jelly",
		"jam",
		"jerky",
		"kale",
		"ketchup",
		"kiwi",
		"kidney beans",
		"lobster",
		"lamb",
		"linguine",
		"lasagna",
		"meatballs",
		"moose",
		"milk",
		"milkshake",
		"noodles",
		"ostrich",
		"pizza",
		"pepperoni",
		"pancakes",
		"quiche",
		"spinach",
		"spaghetti",
		"toast",
		"venison",
		"waffles",
		"walnuts",
		"yoghurt",
		"ziti",
		"zucchini"
	],
	// Colours
	colour: [
		"amber",
		"azure",
		"beige",
		"black",
		"blue",
		"bronze",
		"brown",
		"burgundy",
		"cerulean",
		"coffee",
		"copper",
		"crimson",
		"cyan",
		"emerald",
		"gold",
		"gray",
		"green",
		"indigo",
		"ivory",
		"jade",
		"lavender",
		"lemon",
		"lilac",
		"lime",
		"magenta",
		"maroon",
		"mauve",
		"olive",
		"orange",
		"pink",
		"purple",
		"red",
		"scarlet",
		"silver",
		"tan",
		"turquoise",
		"violet",
		"white",
		"yellow"
	]
}

/**
 * Replace a section of the starting string with the injection
 * @param {string} startingString - String into which to inject
 * @param {number} startIndex - Start position of the injection site
 * @param {number} endIndex - End position of the injection site
 * @param {string} injection - The string to inject
 * @returns The starting string with the given injection
 */
function injectString(startingString, startIndex, endIndex, injection) {
	return startingString.substr(0, startIndex) + injection + startingString.substr(endIndex);
}

/**
 * Inject random words of the given inject type into the lib and return it
 * @param {string} injectType - The type of word to inject into the lib
 * @param {string} lib - The lib into which to inject random words
 * @returns The lib with random words injected into it
 */
function injectIntoLib(injectType, lib) {
	const searchStr = "{" + injectType + "}";
	let startIndex = 0, index;

	// For each injection site for the current inject
	while ((index = lib.indexOf(searchStr, startIndex)) > -1) {
		// Get the start and end indices of the injection site
		const injectStart = index;
		const injectEnd = index + searchStr.length;

		// Get a random word to inject
		const injectStr = libInjects[injectType][Math.floor(Math.random() * libInjects[injectType].length)];

		// Inject the string and store the result as the new lib
		lib = injectString(lib, injectStart, injectEnd, injectStr);

		// Advance the startIndex to the end of the injected word for the next search iteration
		startIndex = injectEnd;
	}

	return lib;
}

/**
 * Select a random madlib and insert randomly selected words into it
 * @returns A random madlib
 */
function generateMadLib() {
	// Choose a random lib
	let lib = libs[Math.floor(Math.random() * libs.length)];

	// Inject random words into the chosen lib
	// Loop over libInjects' members
	for (let injectType in libInjects) {
		// Inject random words of this type into the chosen lib
		lib = injectIntoLib(injectType, lib);
	}

	return lib;
}

console.log(generateMadLib());
